# -*- python -*-
# ex: set syntax=python:

########### Need to be installed on PYTHON3 as well!
#
#	apt install python3-pip libffi-dev
#	pip3 install --upgrade buildbot buildbot-worker buildbot-www buildbot-badges buildbot-grid-view buildbot-console-view buildbot-waterfall-view
#
########### need includes
import os.path
import sys
import runpy

from buildbot.process.properties import Interpolate

########
# Globals object
globalvars = {}

# Helper function to include codefile
def includefile(filename):
	if sys.version_info[0] < 3:
		execfile(filename)
	else:
		runpy.run_path(filename, init_globals=globalvars)

##########
# This is the dictionary that the buildmaster pays attention to. We also use a shorter alias to save typing.
# Create config variables
c = BuildmasterConfig = {}
c['schedulers'] = []
c['builders'] = []
c['services'] = []
c['www'] = []
buildbotdir = "/var/lib/buildbot/master/"

# Global config variables
c['buildbotNetUsageData'] = 'basic'
c['collapseRequests'] = True

# Global Log Settings
c['logCompressionMethod'] = 'gz'
# note: we experience OOM in buildbot when we have large log files - maybe caused
# by compression? - 2019-01-01 rgerhards
c['logMaxSize'] = 1024*1024*128 # 128MiB - check if this is sufficient
c['logMaxTailSize'] = 64*1024 # currently defunct!
c['logEncoding'] = 'utf-8'

# --- SHARED VARIABLES here now!
globalvars['g'] = {}

# dynamic repo URL
globalvars['repoGitUrl'] = Interpolate("git://github.com/%(prop:github_repo_owner)s/%(prop:github_repo_name)s.git")

# Create ENV variables
# globalvars['g']['globalenv']={'UNDER_CI':'YES'} # TODO: how to use???
globalvars['solarisenv_gcc'] = {	'http_proxy': 'http://192.168.1.6:3128',
					'CC': '/opt/csw/bin/gcc',
					'CFLAGS': '-I/opt/csw/include',
					'LIBRARY_PATH': '../local_env/install/lib:/opt/csw/lib',
					'LD_LIBRARY_PATH': '../local_env/install/lib:/opt/csw/lib',
					'LD_OPTIONS': '-R/opt/csw/lib',
					'PKG_CONFIG_PATH': 'local_env/install/lib/pkgconfig:/opt/csw/lib/pkgconfig',
					'PKG_CONFIG': '/opt/csw/bin/pkg-config',
					'CONFIG_SHELL': '/opt/csw/bin/bash',
					'RS_HEADCMD': 'ghead', 'RS_CMPCMD': 'gcmp',
					'RS_SORTCMD': 'gsort', 'GREP': 'ggrep',
					'USE_AUTO_DEBUG': 'off',
					'PATH': '/opt/csw/gnu:/opt/csw/bin:/usr/bin:/usr/sbin:/usr/ccs/bin',
					'UNDER_CI': 'YES',
					}

# Note: Solaris, at least SunStudio, needs the -mt option, else things go
# terribly wrong (e.g. in RELP) -- remember meeting in the nordics
globalvars['solarisenv_sunstudio'] = {	'http_proxy': 'http://192.168.1.6:3128',
					'CC' : '/opt/solarisstudio12.4/bin/cc',
					'CFLAGS': '-mt -I/opt/csw/include',
					'LD_LIBRARY_PATH': '../local_env/install/lib:/opt/csw/lib',
					'LIBRARY_PATH': '../local_env/install/lib:/opt/csw/lib',
					'PKG_CONFIG_PATH': 'local_env/install/lib/pkgconfig:/opt/csw/lib/pkgconfig',
					'PKG_CONFIG': '/opt/csw/bin/pkg-config',
					'CONFIG_SHELL': '/opt/csw/bin/bash',
					'RS_HEADCMD': 'ghead', 'RS_CMPCMD': 'gcmp',
					'RS_SORTCMD': 'gsort', 'GREP': 'ggrep',
					'USE_AUTO_DEBUG': 'off',
					'PATH': '/opt/csw/gnu:/opt/csw/bin:/usr/bin:/usr/sbin:/usr/ccs/bin',
					'CURL_CFLAGS': '-I/opt/csw/include',
					'CURL_LIBS': '-lcurl', 'UNDER_CI':'YES'
					}
globalvars['raspbianenv_gcc'] = {	'LC_ALL': 'C',
					'LIBRARY_PATH': '/usr/lib',
					'LD_LIBRARY_PATH': '/usr/lib'
					}
# ---

# Set c reference to globalvars
lc = c
globalvars['c'] = c
globalvars['lc'] = c

####### include secrects which must not be in git
includefile(buildbotdir + "nogit_secrets.py")

####### Include master function includes
#print os.path.relpath

#import master_includes
# includefile(buildbotdir + "master_includes.py")
from master_includes import appendSchedulers
from master_includes import appendBuilders

####### Exec BUILDWORKERS former BUILDSLAVES
includefile(buildbotdir + "nogit_master_workers.py")

# 'protocols' contains information about protocols which master will use for
# communicating with slaves. You must define at least 'port' option that slaves could connect to your master with this protocol.
c['protocols'] = {'pb': {'port': 9989}}

# ----------------------------------------------
####### CHANGESOURCES
# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.
# ----------------------------------------------

# ----------------------------------------------
####### SCHEDULERS
# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
from buildbot.plugins import schedulers, util

#Add rsyslog schedulers for main repo
# DONE in master_include_rsyslog.py NOW!
# appendSchedulers(c, 'rsyslog', 'rsyslog', 'master')

#Add liblognorm schedulers for main repo
appendSchedulers(c, 'rsyslog', 'liblognorm', 'master')

#Add rsyslog schedulers for main repo
appendSchedulers(c, 'rsyslog', 'liblogging', 'master')

#Add rsyslog schedulers for main repo
appendSchedulers(c, 'rsyslog', 'libfastjson', 'master')

#Add rsyslog schedulers for main repo
appendSchedulers(c, 'rsyslog', 'librelp', 'master')

#Add rsyslog schedulers for main repo
appendSchedulers(c, 'rsyslog', 'libestr', 'master')
# ----------------------------------------------

# ----------------------------------------------
####### BUILDERS
# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.
#
######## Include build factories
# Include / create rsyslog builders
includefile(buildbotdir + "rsyslog_master_include.py")

# Include / create rsyslog-doc builders
includefile(buildbotdir + "master_include_rsyslogdoc.py")

# Include / create liblognorm builders
includefile(buildbotdir + "master_include_liblognorm.py")

# Include / create libfastjson builders
includefile(buildbotdir + "master_include_libfastjson.py")

# Include / create liblogging builders
includefile(buildbotdir + "master_include_liblogging.py")

# Include / create librelp builders
includefile(buildbotdir + "master_include_librelp.py")

# Include / create libestr builders
includefile(buildbotdir + "master_include_libestr.py")
# ----------------------------------------------

# ----------------------------------------------
####### SERVICES REPORTERS
includefile(buildbotdir + "nogit_master_github.py")

# ----------------------------------------------
####### WWW INTERFACE
includefile(buildbotdir + "nogit_master_www.py")

####### PROJECT IDENTITY
#	pip install service_identity
# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "rsyslog"
c['titleURL'] = "https://www.rsyslog.com"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "https://build.rsyslog.com/"

####### DB URL
c['db'] = {
	# This specifies what database buildbot uses to store its state.  You can leave
	# this at its default for all but the largest installations.
	'db_url' : "sqlite:///state.sqlite",
}

######## Docker support stuff
#	pip install docker-compose
#

